// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionServiceClient interface {
	Negotiate(ctx context.Context, opts ...grpc.CallOption) (SessionService_NegotiateClient, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) Negotiate(ctx context.Context, opts ...grpc.CallOption) (SessionService_NegotiateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionService_ServiceDesc.Streams[0], "/signor.SessionService/Negotiate", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionServiceNegotiateClient{stream}
	return x, nil
}

type SessionService_NegotiateClient interface {
	Send(*NegotiateRequest) error
	Recv() (*NegotiateResponse, error)
	grpc.ClientStream
}

type sessionServiceNegotiateClient struct {
	grpc.ClientStream
}

func (x *sessionServiceNegotiateClient) Send(m *NegotiateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionServiceNegotiateClient) Recv() (*NegotiateResponse, error) {
	m := new(NegotiateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations must embed UnimplementedSessionServiceServer
// for forward compatibility
type SessionServiceServer interface {
	Negotiate(SessionService_NegotiateServer) error
	mustEmbedUnimplementedSessionServiceServer()
}

// UnimplementedSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (UnimplementedSessionServiceServer) Negotiate(SessionService_NegotiateServer) error {
	return status.Errorf(codes.Unimplemented, "method Negotiate not implemented")
}
func (UnimplementedSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_Negotiate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionServiceServer).Negotiate(&sessionServiceNegotiateServer{stream})
}

type SessionService_NegotiateServer interface {
	Send(*NegotiateResponse) error
	Recv() (*NegotiateRequest, error)
	grpc.ServerStream
}

type sessionServiceNegotiateServer struct {
	grpc.ServerStream
}

func (x *sessionServiceNegotiateServer) Send(m *NegotiateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionServiceNegotiateServer) Recv() (*NegotiateRequest, error) {
	m := new(NegotiateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signor.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Negotiate",
			Handler:       _SessionService_Negotiate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
